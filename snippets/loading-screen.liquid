<div class="loading-screen" id="loadingScreen">
  <div class="loading-container">
    <div class="glade-text">GLADE</div>
    <div class="loading-progress">
      <div class="loading-progress-bar" id="loadingProgressBar"></div>
    </div>
  </div>
</div>

<style>
.loading-screen {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background-color: var(--primary-color, #000000);
  display: flex;
  justify-content: center;
  align-items: center;
  z-index: 9999;
  transition: opacity 0.3s ease-out;
}

.loading-screen.hidden {
  opacity: 0;
  pointer-events: none;
}

.loading-container {
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  gap: 2rem;
}

.glade-text {
  font-size: 3rem;
  font-weight: 400;
  color: var(--text-color, #ffffff);
  letter-spacing: 0.5em;
  margin-right: -0.5em;
  animation: fadeInOut 2s infinite;
}

.loading-progress {
  width: 200px;
  height: 1px;
  background: rgba(255, 255, 255, 0.1);
  overflow: hidden;
}

.loading-progress-bar {
  width: 0;
  height: 100%;
  background: var(--text-color, #ffffff);
  transition: width 0.8s cubic-bezier(0.4, 0, 0.2, 1);
}

@keyframes fadeInOut {
  0%, 100% { opacity: 0.3; }
  50% { opacity: 1; }
}

@media (max-width: 768px) {
  .glade-text {
    font-size: 2rem;
  }
  
  .loading-progress {
    width: 150px;
  }
}
</style>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const loadingScreen = document.getElementById('loadingScreen');
    const progressBar = document.getElementById('loadingProgressBar');
    let progress = 0;
    let isLoaded = false;
    
    // Ensure minimum loading time for smooth experience
    const minLoadTime = 2000; // 2 seconds minimum
    const startTime = Date.now();
    
    // Animate progress bar with easing
    const progressInterval = setInterval(() => {
      if (progress < 90) {
        // Smooth progress increment with easing
        const remainingProgress = 90 - progress;
        const increment = Math.max(0.5, remainingProgress * 0.1);
        progress += Math.random() * increment;
        progress = Math.min(90, progress);
        progressBar.style.width = progress + '%';
      }
    }, 100);

    // Handle page load
    window.addEventListener('load', function() {
      isLoaded = true;
      checkCompletion();
    });

    function checkCompletion() {
      const elapsedTime = Date.now() - startTime;
      
      if (isLoaded && elapsedTime >= minLoadTime) {
        completeLoading();
      } else {
        // Wait for both minimum time and page load
        setTimeout(checkCompletion, 100);
      }
    }

    function completeLoading() {
      // Smooth progress completion
      const finalizeProgress = () => {
        if (progress < 100) {
          progress += (100 - progress) * 0.1;
          if (100 - progress < 0.1) progress = 100;
          progressBar.style.width = progress + '%';
          requestAnimationFrame(finalizeProgress);
        } else {
          // Fade out loading screen
          setTimeout(() => {
            loadingScreen.classList.add('hidden');
            clearInterval(progressInterval);
          }, 400);
        }
      };
      
      finalizeProgress();
    }
  });
</script> 